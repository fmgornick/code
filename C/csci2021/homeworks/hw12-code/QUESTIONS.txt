                           _________________

                            HW 12 QUESTIONS
                           _________________


Write your answers to the questions below directly in this text file to
prepare for the associated quiz. Credit for the HW is earned by
completing the online quiz.


Note on Experimentation: Run on csel-kh1250-NN
==============================================

  As has been the case in the past, timing execution of code is always
  influenced by the specific machine the code is run on. While you are
  free to run the benchmark codes anywhere on HWs, TAs will be familiar
  with the answers for runs on csel-kh1250-NN.cselabs.umn.edu.  For the
  most consistent results, run the codes there.


PROBLEM 1: colmins_main.c
=========================

(A) Timing
~~~~~~~~~~

  Compile and run the provided `colmins_main' program as indicated
  below.

  ,----
  | > make
  | gcc -Wall -g -Og -c colmins_main.c		
  | gcc -Wall -g -Og -c colmins_funcs.c		
  | gcc -Wall -g -Og -c matvec_util.c
  | gcc -Wall -g -Og -o colmins_main colmins_main.o colmins_funcs.o matvec_util.o
  | 
  | > ./colmins_main 8000 16000
  `----

  Notice that the size of the matrix being used is quite large: 8000
  rows by 16000 columns. You may time other sizes but 8000x16000 is
  usually large enough to get beyond obvious cache effects on most
  machines.

  Run the program several times to ensure that you get a good sense of
  what it's normal behavior is like: there should be timing differences
  between the different functions reported on.

  Paste the timing results produced below for `./colmins_main 8000
  16000'

     col_mins1 CPU usage: 1.3921e+00 sec
     col_mins2 CPU usage: 1.3841e+00 sec
     col_mins3 CPU usage: 1.3856e+00 sec
     col_mins4 CPU usage: 4.6055e-01 sec
     col_mins5 CPU usage: 1.2151e-01 sec

(B) Tricks
~~~~~~~~~~

  Examine the source code for `colmins_main.c'.  Identify the technique
  that is used to avoid a large amount of repeated code to time the
  multiple functions.


PROBLEM 2: Comparisons in colmins_funcs.c
=========================================

(A) col_mins1 baseline
~~~~~~~~~~~~~~~~~~~~~~

  Examine the `col_mins1' function in `colmins_funcs.c' and describe the
  basic approach it uses to solve the problem of finding the minimum of
  each column of a matrix.
  - What pattern of access is used? Is this advantageous for the layout
    of the matrix?
  - What local variables are used versus main memory gets/sets?


(B) col_mins2 Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

  Examine the differences between `col_mins1' and `col_mins2'.
  Particularly comment on
  - Any differences in memory access pattern
  - Any differences in use of local variables/main memory
  - Any differences in speed


(C) col_mins3 Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

  `col_mins3' implements an optimization called loop unrolling.  In this
  technique, rather than iterate by single increments, larger steps are
  taken. Since each iteration uses multiple local variables to store
  partial results that must eventually be combined. All this is meant to
  allow the processor to execute more instructions in sequence before
  looping back which may enable more efficient pipelined and superscalar
  operations.

  Examine the differences between `col_mins2' and `col_mins3'.
  Particularly comment on
  - Any differences in memory access pattern
  - Any differences in use of local variables/main memory
  - Any differences in speed that might be due to the new optimizations


(D) col_mins4 Comparison
~~~~~~~~~~~~~~~~~~~~~~~~

  `col_mins4' also loop unrolling but in a different way than
  `col_mins3'.

  Examine the differences between `col_mins3' and `col_mins4'.
  Particularly comment on
  - What loops are "unrolled" in each and how does this affect the
    remaining code?
  - Any differences in memory access pattern
  - Any differences in use of local variables/main memory
  - Any differences in speed that might be due to the new optimizations


(E) col_mins5 Comparison: The Real Lesson
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  `col_mins5' is inherently different than all of the other routines.
  Examine its structure carefully and ensure that you understand it as
  it may prove useful in an assignment.  Particularly comment on
  - Any differences in memory access pattern from the others
  - Any differences in use of local variables/main memory
  - Any differences in speed that might be due to the new optimizations


PROBLEM 3: Cache and Loop Iterations
====================================

  Below are tables showing values in Main Memory and the state of a
  small Cache.  Beneath this is a short code fragment that sums elements
  from main memory. The code has a user parameter `stride'. For strides
  of 1,2,3,4, work through the code changing cache and counting how many
  cache hits/misses occur with the given stride. Show the final state of
  cache in each case.


Main Memory
~~~~~~~~~~~

  ,----
  | | Addr | Addr Bits      | Value |
  | |------+----------------+-------|
  | |   20 | 00  10  0000   |     9 |
  | |   24 | 00  10  0100   |    10 |
  | |   28 | 00  10  1000   |    11 |
  | |   2C | 00  10  1100   |    12 |
  | |   30 | 00  11  0000   |    13 |
  | |   34 | 00  11  0100   |    14 |
  | |   38 | 00  11  1000   |    15 |
  | |   3C | 00  11  1100   |    16 |
  | |   40 | 01  00  0000   |    17 |
  | |   44 | 01  00  0100   |    18 |
  | |   48 | 01  00  1000   |    19 |
  | |   4C | 01  00  1100   |    20 |
  | |   50 | 01  01  0000   |    21 |
  | |   54 | 01  01  0100   |    22 |
  | |   58 | 01  01  1000   |    23 |
  | |   5C | 01  01  1100   |    24 |
  | |   60 | 01  10  0000   |    25 |
  | |   64 | 01  10  0100   |    26 |
  | |   68 | 01  10  1000   |    27 |
  | |   6C | 01  10  1100   |    28 |
  | |------+----------------+-------|
  | |      | Tag Set Offset |       |
  `----


Cache
~~~~~

  - Direct-mapped: 1 line per set
  - 16-byte lines = 4-bit offset
  - 4 Sets = 2-bit index
  - 8-bit Address = 2-bit tag
  - Total Cache Size = 64 bytes 4 sets * 16 bytes
  - Mostly cold with some data from an earlier part of the code

  ,----
  | |     |   |     | Blocks/Line           |
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  | |-----+---+-----+-----------------------|
  | |  00 | 1 | 00  | 1    2    3     4     |
  | |  01 | 0 | -   | -                     |
  | |  10 | 0 | -   | -                     |
  | |  11 | 0 | -   | -                     |
  | |-----+---+-----+-----------------------|
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  `----


Code
~~~~

  ,----
  | int *data = (int *) 0x20;           // address of start of the array
  | int stride; scanf("%d", &stride);   // user enters 1, 2, 3, or other values
  | int sum = 0;
  | for(int i=0; i<20; i += stride){
  |   sum += data[i];
  | }
  `----


Stats for Strides:
~~~~~~~~~~~~~~~~~~

  Show sum, number of hits/misses, and final cache state for strides of
  1,2,3,4.
  - Stride 1: sum = 370, misses = 5, hits = 15, final cache state
  ,----
  | |     |   |     | Blocks/Line           |
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  | |-----+---+-----+-----------------------|
  | |  00 | 1 | 01  | 17   18   19    20    |
  | |  01 | 1 | 01  | 21   22   23    24    |
  | |  10 | 1 | 01  | 25   26   27    28    |
  | |  11 | 1 | 00  | 13   14   15    16    |
  | |-----+---+-----+-----------------------|
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  `----

  - Stride 2: sum = 180, misses = 5, hits = 5, final cache state
  ,----
  | |     |   |     | Blocks/Line           |
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  | |-----+---+-----+-----------------------|
  | |  00 | 1 | 01  | 17   18   19    20    |
  | |  01 | 1 | 01  | 21   22   23    24    |
  | |  10 | 1 | 01  | 25   26   27    28    |
  | |  11 | 1 | 00  | 13   14   15    16    |
  | |-----+---+-----+-----------------------|
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  `----

  - Stride 3: sum = 126, misses = 5, hits = 2, final cache state
  ,----
  | |     |   |     | Blocks/Line           |
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  | |-----+---+-----+-----------------------|
  | |  00 | 1 | 01  | 17   18   19    20    |
  | |  01 | 1 | 01  | 21   22   23    24    |
  | |  10 | 1 | 01  | 25   26   27    28    |
  | |  11 | 1 | 00  | 13   14   15    16    |
  | |-----+---+-----+-----------------------|
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  `----

  - Stride 4: sum = 85, misses = 5, hits = 0, final cache state
  ,----
  | |     |   |     | Blocks/Line           |
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  | |-----+---+-----+-----------------------|
  | |  00 | 1 | 01  | 17   18   19    20    |
  | |  01 | 1 | 01  | 21   22   23    24    |
  | |  10 | 1 | 01  | 25   26   27    28    |
  | |  11 | 1 | 00  | 13   14   15    16    |
  | |-----+---+-----+-----------------------|
  | | Set | V | Tag | 0-3  4-7  8-11  12-15 |
  `----


PROBLEM 4: Timing Benchmarks
============================

  The code in `reversal_benchmark.c' implements two functions which
  reverse the elements of an array. They take markedly different
  approaches.
  ,----
  | void reverse_arr1(int *arr, long size){
  |   int *tmp = malloc(sizeof(int)*size);
  |   for(long i=0; i<size; i++){
  |     tmp[i] = arr[size-i-1];
  |   }
  |   for(long i=0; i<size; i++){
  |     arr[i] = tmp[i];
  |   }
  |   free(tmp);
  | }
  | 
  | void reverse_arr2(int *arr, long size){
  |   for(long i=0; i<size/2; i++){
  |     int tmp = arr[i];
  |     arr[i] = arr[size-i-1];
  |     arr[size-i-1] = tmp;
  |   }
  | }
  `----


(A) Predictions
~~~~~~~~~~~~~~~

  Predict which of these two functions will run faster based on their
  code characteristics. Justify your answer by contrasting the features
  of the two reversal functions.

  the second one should be faster because it doesn't need to malloc anything.
  It also has one less for loop and only iterates through halve of the array.


(B) Timing
~~~~~~~~~~

  Modify the provided `reversal_benchmark.c' file to perform timing
  calculations on the two functions as they are called on different
  sizes of arrays.  Print runtimes in a tabular format.

  Make sure to compile/run with a convention like the following:
  ,----
  | > gcc -Og reversal_benchmark.c    # compile with minimal optimizations
  | 
  | > ./a.out                         # show usage
  | usage: ./a.out <min_pow2> <max_pow2> <repeats>
  | 
  | > ./a.out 10 20 100               # run benchmark, size 2^10 to 2^20, 100 repeats per
  |      SIZE        rev1         rev2
  |      1024     0.000160     0.000100
  |      2048     0.000320     0.000232
  |      4096     0.000632     0.000412
  |      8192     0.001260     0.000823
  |     16384     0.002544     0.001644
  |     32768     0.002852     0.001680
  |     65536     0.005200     0.003324
  |    131072     0.010478     0.006661
  |    262144     0.021121     0.013692
  |    524288     0.043776     0.026652
  |   1048576     0.095115     0.054171
  `----



  Paste the C code you wrote below to show you how you timed the
  function runs.


(C) Analysis
~~~~~~~~~~~~

  Paste the table of numbers your code produced for timing the two
  reversal functions. Describe if the one you predicted would be faster
  actually was measured to be faster.

        SIZE        rev1         rev2
        1024     0.000160     0.000100
        2048     0.000320     0.000232
        4096     0.000632     0.000412
        8192     0.001260     0.000823
       16384     0.002544     0.001644
       32768     0.002852     0.001680
       65536     0.005200     0.003324
      131072     0.010478     0.006661
      262144     0.021121     0.013692
      524288     0.043776     0.026652
     1048576     0.095115     0.054171


(D) OPTIONAL: Optimized Reversal
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  After determining the faster reversal function, modify it further in
  an attempt to further improve its performance.


PROBLEM 5 (OPTIONAL): Profiler
==============================

  This problem demonstrates the utility of a performance *profiler* to
  help locate "hot spots" in code which take most of the run time
  associated with it.

  Change into the directory `warsim' that is part of the HW code
  distribution.  The code contained within it implements a simple
  simulation of the card game War.  The details of the game are not
  important except that the program simulates playing of the game then
  reports statistics on it.

  First compile the program by using the provided Makefile.
  ,----
  | > make
  | gcc -Og -g -pg -no-pie -c libwar.c
  | gcc -Og -g -pg -no-pie -c libcardlist.c
  | gcc -Og -g -pg -no-pie -o warsim warsim.c libwar.o libcardlist.o
  `----
  Notice that the option `-pg' is passed in which will enable
  /profiling/ of the code. The `-no-pie' option is present in case a
  buggy version of `gcc' is present and has no significant effect.

  Run the resulting `warsim' program as follows.

  ,----
  | # show usage
  | > ./warsim
  | usage: ./warsim cardfile ngames [logfile]
  | 
  | # simulate 10 games
  | > ./warsim full.deck 10
  | ----------------------
  | Final stats
  |   0.60 P1 Win Ratio
  | 408.50 Avg battles per game
  |  30.30 Avg wars per game
  | 
  | # simulate 100 games
  | > ./warsim full.deck 100
  | ----------------------
  | Final stats
  |   0.54 P1 Win Ratio
  | 301.56 Avg battles per game
  |  22.94 Avg wars per game
  | 
  | # simulate 2000 games
  | > ./warsim full.deck 2000
  | ----------------------
  | Final stats
  |   0.54 P1 Win Ratio
  | 298.48 Avg battles per game
  |  22.79 Avg wars per game
  `----

  This last run might take a few seconds as 2000 games are simulated.

  After the runs are finished, the file `gmon.out' appears. This is an
  output file that is generated on running programs with profiling
  enabled.
  ,----
  | > ls gmon.out
  | gmon.out
  | > file gmon.out
  | gmon.out: GNU prof performance data - version 1
  `----

  The contents of the file are binary and must be interpreted by the
  program `gprof'.  Use the `-b' option to show "brief" output and pass
  in the name of the program that was run.
  ,----
  | > gprof -b warsim
  | Flat profile:
  | 
  | Each sample counts as 0.01 seconds.
  |   %   cumulative   self              self     total           
  |  time   seconds   seconds    calls  ms/call  ms/call  name    
  |  50.11      0.06     0.06  2387860     0.00     0.00  print_list
  |  25.06      0.09     0.03 32507650     0.00     0.00  card2str
  |   8.35      0.10     0.01   596965     0.00     0.00  end_battle
  |   8.35      0.11     0.01     4000     0.00     0.00  new_stack
  |   8.35      0.12     0.01       52     0.19     0.19  str2card
  |   0.00      0.12     0.00  8073378     0.00     0.00  stack_empty
  |   0.00      0.12     0.00  6656812     0.00     0.00  queue_empty
  |   0.00      0.12     0.00  3944508     0.00     0.00  stack_top
  |   0.00      0.12     0.00  1675522     0.00     0.00  queue_add
  |   0.00      0.12     0.00  1675522     0.00     0.00  queue_remove
  |   0.00      0.12     0.00  1571470     0.00     0.00  queue_front
  |   0.00      0.12     0.00  1465470     0.00     0.00  stack_pop
  |   0.00      0.12     0.00  1465470     0.00     0.00  stack_push
  |   0.00      0.12     0.00   596965     0.00     0.00  start_battle
  |   0.00      0.12     0.00     6001     0.00     0.00  new_queue
  |   0.00      0.12     0.00     6001     0.00     0.00  queue_free
  |   0.00      0.12     0.00     4000     0.00     0.00  stack_free
  |   0.00      0.12     0.00     2000     0.00     0.00  deal2
  |   0.00      0.12     0.00     2000     0.00     0.06  playwar
  |   0.00      0.12     0.00     2000     0.00     0.00  queue_copy
  |   0.00      0.12     0.00     2000     0.00     0.00  queue_rotate
  |   0.00      0.12     0.00        1     0.00    10.02  read_deck
  | ...
  `----

  The first part of the output shows a breakdown of how much time was
  spent in each function associated the most recent run of the program.

  Analyze this breakdown and make suggestions as to where optimization
  effort might best be spent to increase the speed of warsim.
